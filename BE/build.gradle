plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "4.2.1.3168"
	id 'jacoco'
	id 'org.flywaydb.flyway' version '9.0.0'
}

flyway {
	url = 'jdbc:mysql://host.docker.internal:3306/my_social'
	user = 'root'
	password = '1234'
	locations = ['classpath:db/migration']
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.swagger.core.v3:swagger-models:2.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/example/be/Configuration/**/*',
					'com/example/be/Repository/**/*',
					'com/example/be/Domain/**/*',
					'com/example/be/Services/**/*',
//                    'com/example/backend/Controller/**/*'
			])
		}))
	}
}

sonar {
	properties {
		property "sonar.projectKey", "socialmediaQuality"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_37b715ae124ea9f3463b7392314f8e869e056640"
		property "sonar.scm.disabled", true
	}
}

tasks.named('sonar') {
	dependsOn 'jacocoTestReport'
}

tasks.withType(Test) {
	jacoco {
		excludes = ['**/*Lombok*.*', '**/generated/*']
	}
}

